plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

group = 'com.example.villager_pickup'
version = '1.0.0'

base {
    archivesName = "villager_pickup"
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "villager_pickup" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

// Fix duplicate handling for jar tasks
tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

repositories {
    mavenCentral()
    maven { 
        name = "Fabric"
        url = "https://maven.fabricmc.net/" 
    }
    maven { 
        name = "Mojang"
        url = "https://libraries.minecraft.net/"
    }
    // Add Cardinal Components repository
    maven {
        name = "Ladysnake Mods"
        url = "https://maven.ladysnake.org/releases"
    }
}

repositories {
    maven {
        name = "Ladysnake Mods"
        url = "https://maven.ladysnake.org/releases"
    }
    // Add repositories to get dependencies from
    maven {
        name = "Fabric"
        url = "https://maven.fabricmc.net/"
    }
    maven {
        name = "CurseForge"
        url = "https://cursemaven.com"
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
    mavenCentral()
}

dependencies {
    // Core dependencies
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Use the full Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", "1.21.4"
    inputs.property "loader_version", "0.16.13"
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": "1.21.4",
                "loader_version": "0.16.13"
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = "villager_pickup"
            from components.java
        }
    }
}
